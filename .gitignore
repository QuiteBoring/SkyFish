package chime.calculator.util;

import chime.calculator.config.PathConfig;
import chime.util.BlockUtil;
import net.minecraft.util.BlockPos;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class Node {
    private final int x, y, z; // 3D coordinates
    private Node parent;
    private double gCost = Double.MAX_VALUE; // Cost from start to this node
    private double hCost = 0; // Heuristic cost to end

    public Node(int x, int y, int z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public Node(BlockPos pos) {
        this(pos.getX(), pos.getY(), pos.getZ());
    }

    public Node getParent() {
        return parent;
    }

    public void setParent(Node parent) {
        this.parent = parent;
    }

    public double getGCost() {
        return gCost;
    }

    public void setGCost(double gCost) {
        this.gCost = gCost;
    }

    public double getHCost() {
        return hCost;
    }

    public void setHCost(double hCost) {
        this.hCost = hCost;
    }

    public double getTotalCost() {
        return gCost + hCost;
    }

    public void calculateCosts(Node endNode) {
        this.hCost = calculateHeuristic(endNode);
    }

    public double calculateHeuristic(Node endNode) {
        // Use Euclidean distance for flying
        return Math.sqrt(
            Math.pow(endNode.x - this.x, 2) +
            Math.pow(endNode.y - this.y, 2) +
            Math.pow(endNode.z - this.z, 2)
        );
    }

    public double distanceTo(Node neighbor) {
        // Distance between this node and a neighbor
        return Math.sqrt(
            Math.pow(neighbor.x - this.x, 2) +
            Math.pow(neighbor.y - this.y, 2) +
            Math.pow(neighbor.z - this.z, 2)
        );
    }

    public List<Node> getNeighbors(PathConfig config) {
        List<Node> neighbors = new ArrayList<>();

        // All possible 3D movement directions (26 directions: cardinal, diagonal, vertical)
        int[][] directions = {
            {1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0}, {0, 0, 1}, {0, 0, -1},
            {1, 1, 0}, {1, -1, 0}, {-1, 1, 0}, {-1, -1, 0},
            {1, 0, 1}, {1, 0, -1}, {-1, 0, 1}, {-1, 0, -1},
            {0, 1, 1}, {0, 1, -1}, {0, -1, 1}, {0, -1, -1},
            {1, 1, 1}, {1, 1, -1}, {1, -1, 1}, {1, -1, -1},
            {-1, 1, 1}, {-1, 1, -1}, {-1, -1, 1}, {-1, -1, -1}
        };

        for (int[] dir : directions) {
            int nx = x + dir[0];
            int ny = y + dir[1];
            int nz = z + dir[2];

            // Validate neighbors using BlockUtil
            if (isValid(nx, ny, nz)) {
                neighbors.add(new Node(nx, ny, nz));
            }
        }

        return neighbors;
    }

    private boolean isValid(int nx, int ny, int nz) {
        // Use BlockUtil to determine if the block at the position is solid
        return !BlockUtil.isBlockSolid(new BlockPos(nx, ny, nz));
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Node node = (Node) o;
        return x == node.x && y == node.y && z == node.z;
    }

    @Override
    public int hashCode() {
        return Objects.hash(x, y, z);
    }

    @Override
    public String toString() {
        return "Node{" + "x=" + x + ", y=" + y + ", z=" + z + '}';
    }
}