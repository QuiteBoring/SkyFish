package chime.calculator;

import chime.calculator.config.PathConfig;
import chime.calculator.util.Node;
import chime.util.LogUtil;
import chime.util.Timer;

import java.util.*;

public class PathFinder {

    private static final Timer timer = new Timer();

    public static List<Node> findPath(PathConfig config) {
        PriorityQueue<Node> open = new PriorityQueue<>(Comparator.comparingDouble(Node::getTotalCost));
        Set<Node> closed = new HashSet<>();

        Node startNode = new Node(config.start);
        Node endNode = new Node(config.end);

        startNode.calculateCosts(endNode);

        open.add(startNode);
        timer.reset();

        while (!open.isEmpty()) {
            if (timer.hasElapsed(config.timeout, false)) {
                LogUtil.sendError("Pathfinding has timed out.");
                break;
            }

            Node current = open.poll();

            if (current.equals(endNode)) {
                return reconstructPath(current);
            }

            closed.add(current);

            for (Node neighbor : current.getNeighbors(config)) {
                if (closed.contains(neighbor)) {
                    continue;
                }

                double tentativeGCost = current.getGCost() + current.distanceTo(neighbor);

                if (tentativeGCost < neighbor.getGCost()) {
                    neighbor.setParent(current);
                    neighbor.setGCost(tentativeGCost);
                    neighbor.setHCost(neighbor.calculateHeuristic(endNode));

                    if (!open.contains(neighbor)) {
                        open.add(neighbor);
                    }
                }
            }
        }

        LogUtil.sendError("Pathfinding failed to find a valid path.");
        return Collections.emptyList();
    }

    private static List<Node> reconstructPath(Node current) {
        List<Node> path = new ArrayList<>();
        while (current != null) {
            path.add(current);
            current = current.getParent();
        }
        Collections.reverse(path);
        return path;
    }
}